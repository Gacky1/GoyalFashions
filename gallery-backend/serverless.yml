service: gfpl-gallery-api

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${opt:stage, 'prod'}
  
  environment:
    ADMIN_USERNAME: ${env:ADMIN_USERNAME}
    ADMIN_PASSWORD: ${env:ADMIN_PASSWORD}
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${env:AWS_REGION}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    DYNAMODB_TABLE_NAME: ${env:DYNAMODB_TABLE_NAME}
    NODE_ENV: production
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${env:S3_BUCKET_NAME}
        - arn:aws:s3:::${env:S3_BUCKET_NAME}/*
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:${env:AWS_REGION}:*:table/${env:DYNAMODB_TABLE_NAME}

functions:
  api:
    handler: lambda.handler
    timeout: 30
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000